"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import argus.adc_pb2
import argus.temperature.thermocouple_channel_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ThermocoupleCalibration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SelectThermocoupleRequest(google.protobuf.message.Message):
        """Request to select which thermocouple to calibrate"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ADC_DEVICE_FIELD_NUMBER: builtins.int
        THERMOCOUPLE_CHANNEL_FIELD_NUMBER: builtins.int
        adc_device: argus.adc_pb2.AdcDevice.ValueType
        thermocouple_channel: argus.temperature.thermocouple_channel_pb2.ThermocoupleChannel.ValueType
        def __init__(
            self,
            *,
            adc_device: argus.adc_pb2.AdcDevice.ValueType = ...,
            thermocouple_channel: argus.temperature.thermocouple_channel_pb2.ThermocoupleChannel.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["adc_device", b"adc_device", "thermocouple_channel", b"thermocouple_channel"]) -> None: ...

    @typing.final
    class CollectDataPointRequest(google.protobuf.message.Message):
        """Request/Response for a data collection step during calibration. These datapoints are then later used to perform the linear regression."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EXPECTED_FIELD_NUMBER: builtins.int
        expected: builtins.float
        def __init__(
            self,
            *,
            expected: builtins.float = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["expected", b"expected"]) -> None: ...

    @typing.final
    class CollectDataPointResponse(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MEASURED_FIELD_NUMBER: builtins.int
        EXPECTED_FIELD_NUMBER: builtins.int
        measured: builtins.float
        expected: builtins.float
        def __init__(
            self,
            *,
            measured: builtins.float = ...,
            expected: builtins.float = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["expected", b"expected", "measured", b"measured"]) -> None: ...

    @typing.final
    class PerformRegressionRequest(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class CalibrationResultResponse(google.protobuf.message.Message):
        """Response containing the results of the calibration after all data points have been collected"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SUCCESS_FIELD_NUMBER: builtins.int
        SCALE_FIELD_NUMBER: builtins.int
        OFFSET_FIELD_NUMBER: builtins.int
        success: builtins.bool
        scale: builtins.float
        offset: builtins.float
        def __init__(
            self,
            *,
            success: builtins.bool = ...,
            scale: builtins.float | None = ...,
            offset: builtins.float | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_offset", b"_offset", "_scale", b"_scale", "offset", b"offset", "scale", b"scale"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_offset", b"_offset", "_scale", b"_scale", "offset", b"offset", "scale", b"scale", "success", b"success"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_offset", b"_offset"]) -> typing.Literal["offset"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_scale", b"_scale"]) -> typing.Literal["scale"] | None: ...

    SELECT_THERMOCOUPLE_REQUEST_FIELD_NUMBER: builtins.int
    COLLECT_DATA_POINT_REQUEST_FIELD_NUMBER: builtins.int
    COLLECT_DATA_POINT_RESPONSE_FIELD_NUMBER: builtins.int
    PERFORM_REGRESSION_REQUEST_FIELD_NUMBER: builtins.int
    CALIBRATION_RESULT_RESPONSE_FIELD_NUMBER: builtins.int
    @property
    def select_thermocouple_request(self) -> global___ThermocoupleCalibration.SelectThermocoupleRequest: ...
    @property
    def collect_data_point_request(self) -> global___ThermocoupleCalibration.CollectDataPointRequest: ...
    @property
    def collect_data_point_response(self) -> global___ThermocoupleCalibration.CollectDataPointResponse: ...
    @property
    def perform_regression_request(self) -> global___ThermocoupleCalibration.PerformRegressionRequest: ...
    @property
    def calibration_result_response(self) -> global___ThermocoupleCalibration.CalibrationResultResponse: ...
    def __init__(
        self,
        *,
        select_thermocouple_request: global___ThermocoupleCalibration.SelectThermocoupleRequest | None = ...,
        collect_data_point_request: global___ThermocoupleCalibration.CollectDataPointRequest | None = ...,
        collect_data_point_response: global___ThermocoupleCalibration.CollectDataPointResponse | None = ...,
        perform_regression_request: global___ThermocoupleCalibration.PerformRegressionRequest | None = ...,
        calibration_result_response: global___ThermocoupleCalibration.CalibrationResultResponse | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["calibration_result_response", b"calibration_result_response", "collect_data_point_request", b"collect_data_point_request", "collect_data_point_response", b"collect_data_point_response", "message", b"message", "perform_regression_request", b"perform_regression_request", "select_thermocouple_request", b"select_thermocouple_request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["calibration_result_response", b"calibration_result_response", "collect_data_point_request", b"collect_data_point_request", "collect_data_point_response", b"collect_data_point_response", "message", b"message", "perform_regression_request", b"perform_regression_request", "select_thermocouple_request", b"select_thermocouple_request"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["message", b"message"]) -> typing.Literal["select_thermocouple_request", "collect_data_point_request", "collect_data_point_response", "perform_regression_request", "calibration_result_response"] | None: ...

global___ThermocoupleCalibration = ThermocoupleCalibration
